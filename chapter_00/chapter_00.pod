=head1 Chapter 00 - Preparing the Skeleton

=head2 A Good Start

Let's start by creating the basic layout for our module.

Create a directory for the project called F<XSFun>. Enter the directory and
begin creating the following files.

=head3 XSFun.pm

Create a directory called F<lib> and inside it create a file called
F<XSFun.pm>, content as follows:

    package XSFun;

    use strict;
    use warnings;
    use XSLoader;

    use Exporter 5.57 'import';

    our $VERSION     = '0.001';
    our %EXPORT_TAGS = ( 'all' => [] );
    our @EXPORT_OK   = ( @{ $EXPORT_TAGS{'all'} } );

    XSLoader::load('XSFun', $VERSION);

    1;

    =head1 NAME

    XSFun - Learning XS the fun way

L<XSLoader> loads C libraries dynamically so they can be used in Perl.

As soon as you C<use XSFun>, it will load our XS code using L<XSLoader> and
make it available and known to Perl.

=head3 Makefile.PL

In the top-level directory create the F<Makefile.PL> which will generate a
proper F<Makefile>, content as follows:

    use 5.008005;
    use ExtUtils::MakeMaker;
    WriteMakefile(
        NAME           => 'XSFun',
        VERSION_FROM   => 'lib/XSFun.pm',
        PREREQ_PM      => { 'Test::More' => 0, 'Exporter' => '5.57' },
        ABSTRACT_FROM  => 'lib/XSFun.pm',
        AUTHOR         => 'You',
        LIBS           => [''],
        DEFINE         => '',
        INC            => '-I.',
        OBJECT         => '$(O_FILES)',
    );

=head3 ppport.h

The F<ppport.h> file (Perl/Pollution/Portability) contains a series of
macros and, if explicitly requested, functions that allow XS modules to be
built using older versions of Perl.

You can generate it using the following command:

    perl -MDevel::PPPort -E'Devel::PPPort::WriteFile'

=head3 XSFun.xs

The XS file contains both XS code and possibly valid C code. At first we
will insert C code into it, but with time we will use it to connect to
existing libraries.

If you want to optimize something, you can simply implement it directly in
the XS file. If you want to connect to another library, you will use the XS
code in order to glue together an existing library and Perl.

Create the file F<XSFun.xs> with the following content:

    #define PERL_NO_GET_CONTEXT
    #include "EXTERN.h"
    #include "perl.h"
    #include "XSUB.h"
    #include "ppport.h"

    /* C functions */

    MODULE = XSFun      PACKAGE = XSFun

    # XS code

The first line changes the compiled C code so it does not fetch the context
every time it calls a Perl API function. This will make the code more
efficient at the cost of being aware of MULTIPLICITY and threads. While this
is a somewhat vague description, it should generally be used as it will make
your XS code faster when run under threaded perls, without any additional
work, I<unless> you define helper C functions in your XS file (and even in
that case the additional work is minimal), which is good enough for us to
add it. It's considered a modern XS practice.

The next three lines are XS headers. The last include line uses the
portability layer of F<ppport.h>. After that we can insert any C code we
want. Then, we give enough XS information to connect this XS file to our
Perl code.  Afterwards we can provide more advanced XS functionality.

From this point on we will use this setup as our skeleton. You can save it
separately and copy it over in every new chapter.
